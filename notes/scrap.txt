REPORT NOTES
------------

Grid system that includes the panels and their constraints. 
  This turnes out to be a division by 144, a Fibonacci number. 
  The total width of the wall is 1536 in. 1536/144 = 5.3 in vertical divisions.
  The grid establishes a hierarchy of places where rectangles split in two.
  The 144 grid spaces can be further subdivided, but maintain their integrity.
Panel constraint: gap between panels is 1/4 in., so no really narrow shapes get placed right at the edge. 

Looks ("aesthetics") we borrow from the example image Fibotree142
  vertical divisions predominate
  palette (within limits)
  
Other aesthetic considerations
  division of space
  	large scale: spanning the portal, horizontal predominates
  	mid scale: verticals emerge
  	fine scale: verticals predominate, ruled fills in some areas
  	where could gradients appear? large scale and fine scale, not mid scale
  tonality (lighter colors, pastels, predominate, with smaller saturated accent colors)
  spatial illusions
  	finer divisions towards top
  	"sky" and "land" divisions
  	low horizontals bridging portal
  gradients in Lab color space, not linear
  Horizontal division
  	related to spatial illusions 
  	where do we place a "horizon"? 
  	at average eye level? variable heights around eye level?


CODE NOTES
----------

makeInnerShapes
General problem: in Processing, draw only when necessary, instead of constantly looping
probability lookup table, one technique for biased probability is to select numbers from an array
  over an interval
  sorted array

Each large scale rectangular element in the over all pattern ("fibotree") has its own instance of a FiboTreeBuilder, a class that provides the functionality of Fibo_001.java and its variants. The FiboTreeBuilder has a FiboTreeGrid instance to handle where it places divisions. It also implements a function to change the verticality variable and the "pruning" (stochastic return) over each level.

Some tools to consider
  A class that assigns a fill color to geometry (rectangles, to begin with) based on a bitmap, i.e. using the average color in the region covered by the geomety.
  Fitting divisions to the FiboTreeGrid pattern, especially when depth = 11 (144 divisions)
  Fitting a grid within a block--i.e., filling a rectangle with a line pattern.
  Grouping patterns
  Regulating the probability of "pruning" per level.

FIXED!: Fix ConcurrentModificationException in Fibo_001, Fibo_002. Seems to come from keypress processing triggering a rewriting of the blocklist while drawing is going on. Put a noLoop, loop around the call that triggers.

** Turn Fibo_002 and FiboTreeGrid into classes called by a PApplet.




======== scrap =============


	public void threeRectangleWall() {
		// split into five parts
		float p21 = 21.0f/144 * 1536;
		float p34 = 34.0f/144 * 1536;
		float p89 = (1536 - p34 - p21);
		TaggedRectangle tr1 = new TaggedRectangle(this, 0, 0, p21, 276, NodeType.zero, depth);
		blockList.add(tr1);
		buildRectangles(tr1);
		TaggedRectangle tr2 = new TaggedRectangle(this, p21, 0, p34, 276, NodeType.zero, depth);
		blockList.add(tr2);
		buildRectangles(tr2);
		TaggedRectangle tr3 = new TaggedRectangle(this, p21 + p34, 0, p89, 276, NodeType.zero, depth);
		blockList.add(tr3);
		buildRectangles(tr3);
	}



	float[] vertArray = {1, 0.33f, 0.67f, 1.5f, 3f, 24, 12f, 6f };
	/** interpolation array with break probabilities */
	float[] breakArray = {0, 0.01f, 0.025f, 0.333f, 0};



---- depth = 8 ----
---- first pass of decodeString ----
-- first pass string length = 34
0110110101101101011010110110101101
---- second pass of decodeString ----
-- string length = 26
02020102020102010202010201
---- third pass of decodeString ----
zeroCount = 13, oneCount = 5, twoCount = 8
-- total = 25.978714
---- x = 1536.0


depth = 9
---- first pass of loadTables ----
-- first pass string length = 55
1010110101101101011010110110101101101011010110110101101
---- second pass of loadTables ----
-- string length = 43
1010201020201020102020102020102010202010201
---- third pass of loadTables ----
zeroCount = 21, oneCount = 10, twoCount = 12
-- total = 42.395123
---- x = 1535.9999


depth = 10
---- first pass of loadTables ----
-- first pass string length = 89
01101101011011010110101101101011011010110101101101011010110110101101101011010110110101101
---- second pass of loadTables ----
-- string length = 68
02020102020102010202010202010201020201020102020102020102010202010201
---- third pass of loadTables ----
zeroCount = 34, oneCount = 13, twoCount = 21
-- total = 67.99187
---- x = 1535.9995



depth = 11
---- first pass of loadTables ----
-- first pass string length = 144
101011010110110101101011011010110110101101011011010110101101101011011010110101101101011011010110101101101011010110110101101101011010110110101101
---- second pass of loadTables ----
-- string length = 111
101020102020102010202010202010201020201020102020102020102010202010202010201020201020102020102020102010202010201
---- third pass of loadTables ----
zeroCount = 55, oneCount = 23, twoCount = 33
-- total = 110.38699
---- x = 1535.9988





0                                                                                                                                               
1                                                                                                                                               
0                                                      1                                                                                        
1                                                      0                                 1                                                      
0                    1                                 1                                 0                    1                                 
1                    0            1                    0            1                    1                    0            1                    
0       1            1            0       1            1            0       1            0       1            1            0       1            
1       0    1       0    1       1       0    1       0    1       1       0    1       1       0    1       0    1       1       0    1       
0  1    1    0  1    1    0  1    0  1    1    0  1    1    0  1    0  1    1    0  1    0  1    1    0  1    1    0  1    0  1    1    0  1    
1  0 1  0 1  1  0 1  0 1  1  0 1  1  0 1  0 1  1  0 1  0 1  1  0 1  1  0 1  0 1  1  0 1  1  0 1  0 1  1  0 1  0 1  1  0 1  1  0 1  0 1  1  0 1  
01 1 01 1 01 01 1 01 1 01 01 1 01 01 1 01 1 01 01 1 01 1 01 01 1 01 01 1 01 1 01 01 1 01 01 1 01 1 01 01 1 01 1 01 01 1 01 01 1 01 1 01 01 1 01 
101011010110110101101011011010110110101101011011010110101101101011011010110101101101011011010110101101101011010110110101101101011010110110101101


•                                                                                                                                               
|_______________________________________________________________________________________________________________________________________________
•                                                      |________________________________________________________________________________________
|______________________________________________________•                                 |______________________________________________________
•                    |_________________________________|_________________________________•                    |_________________________________
|____________________•            |____________________•            |____________________|____________________•            |____________________
•       |____________|____________•       |____________|____________•       |____________•       |____________|____________•       |____________
|_______•    |_______•    |_______|_______•    |_______•    |_______|_______•    |_______|_______•    |_______•    |_______|_______•    |_______
•  |____|____•  |____|____•  |____•  |____|____•  |____|____•  |____•  |____|____•  |____•  |____|____•  |____|____•  |____•  |____|____•  |____
|__• |__• |__|__• |__• |__|__• |__|__• |__• |__|__• |__• |__|__• |__|__• |__• |__|__• |__|__• |__• |__|__• |__• |__|__• |__|__• |__• |__|__• |__
•|_|_•|_|_•|_•|_|_•|_|_•|_•|_|_•|_•|_|_•|_|_•|_•|_|_•|_|_•|_•|_|_•|_•|_|_•|_|_•|_•|_|_•|_•|_|_•|_|_•|_•|_|_•|_|_•|_•|_|_•|_•|_|_•|_|_•|_•|_|_•|_
|•|•||•|•||•||•|•||•|•||•||•|•||•||•|•||•|•||•||•|•||•|•||•||•|•||•||•|•||•|•||•||•|•||•||•|•||•|•||•||•|•||•|•||•||•|•||•||•|•||•|•||•||•|•||•|




0                                                                                                                                               
1_______________________________________________________________________________________________________________________________________________
0                                                      1________________________________________________________________________________________
1______________________________________________________0                                 1______________________________________________________
0                    1_________________________________1_________________________________0                    1_________________________________
1____________________0            1____________________0            1____________________1____________________0            1____________________
0       1____________1____________0       1____________1____________0       1____________0       1____________1____________0       1____________
1_______0    1_______0    1_______1_______0    1_______0    1_______1_______0    1_______1_______0    1_______0    1_______1_______0    1_______
0  1____1____0  1____1____0  1____0  1____1____0  1____1____0  1____0  1____1____0  1____0  1____1____0  1____1____0  1____0  1____1____0  1____
1__0 1__0 1__1__0 1__0 1__1__0 1__1__0 1__0 1__1__0 1__0 1__1__0 1__1__0 1__0 1__1__0 1__1__0 1__0 1__1__0 1__0 1__1__0 1__1__0 1__0 1__1__0 1__
01_1_01_1_01_01_1_01_1_01_01_1_01_01_1_01_1_01_01_1_01_1_01_01_1_01_01_1_01_1_01_01_1_01_01_1_01_1_01_01_1_01_1_01_01_1_01_01_1_01_1_01_01_1_01_
101011010110110101101011011010110110101101011011010110101101101011011010110101101101011011010110101101101011010110110101101101011010110110101101



